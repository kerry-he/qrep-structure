using LinearAlgebra
import Hypatia
import Hypatia.Cones
import Hypatia.Solvers
import MAT

include("cones/quantkeyrate.jl")
include("cones/quantratedist.jl")
include("cones/quantcoherentinf.jl")
include("cones/quantmutualinf.jl")
include("utils/helper.jl")

T = Float64
R = Complex{T}

f = MAT.matopen("data/dprBB84_1_02_15.mat")
data = MAT.read(f, "Data")
K_list = convert(Vector{Matrix{R}}, data["Klist"][:])
Z_list = convert(Vector{Matrix{T}}, data["Zlist"][:])

ϵ = 1e-8
# ni = 4
# no = 3
# ne = 2
# V = randEBChannel(T, ni, no, ne)

# N(x)  = pTr!(zeros(T, no, no), V*x*V', 2, (no, ne))
# Nc(x) = pTr!(zeros(T, ne, ne), V*x*V', 1, (no, ne))

K = QuantKeyRate{T, R}(K_list, Z_list, "dprBB84")
# K = QuantRateDistortion{T}(ni)
# K = QuantCoherentInformation{T}(ni, no, ne, N, Nc)
# K = QuantMutualInformation{T}(ni, no, ne, V)
Cones.setup_extra_data!(K)
K.point = Cones.set_initial_point!(zeros(T, K.dim), K)
K.grad = zeros(T, K.dim)
K.dder3 = zeros(T, K.dim)

Cones.reset_data(K)
point = [[ 3.32759958e-01]
[ 7.70920510e-02]
[ 7.19611759e-03]
[-9.66104825e-03]
[ 5.41558143e-02]
[-2.19332302e-03]
[ 4.54769943e-02]
[ 1.11513722e-02]
[ 3.18735189e-02]
[ 1.02395953e-01]
[ 3.46657216e-02]
[-4.73908850e-03]
[-7.90939728e-03]
[-2.22994986e-02]
[-1.42487360e-02]
[-2.22662208e-02]
[ 7.64375719e-02]
[ 2.74486851e-02]
[-9.93093355e-03]
[ 1.82332052e-02]
[-3.39105622e-03]
[-1.07824560e-02]
[-4.73833084e-02]
[ 1.22622309e-02]
[ 5.52578047e-03]
[ 9.99119229e-02]
[-1.36399583e-02]
[ 1.99174638e-02]
[-1.05252695e-02]
[ 1.99406109e-02]
[ 4.19897753e-02]
[ 4.30128792e-03]
[-4.22898603e-02]
[-2.60085277e-03]
[-3.19300377e-03]
[-1.37367431e-03]
[ 8.62196410e-02]
[-6.15451517e-04]
[-2.81185493e-02]
[ 2.78434442e-03]
[-3.05602353e-02]
[-3.33235330e-04]
[ 4.26455464e-03]
[-1.38004972e-03]
[ 1.00250764e-02]
[ 6.84848851e-03]
[-4.39566491e-02]
[-1.07308120e-02]
[-1.65455507e-02]
[ 6.74922820e-02]
[-8.62396644e-03]
[ 3.50578979e-02]
[-4.24861925e-04]
[-1.51345082e-03]
[ 2.17798171e-02]
[-4.01930859e-02]
[ 5.05880322e-03]
[ 2.07057150e-02]
[ 2.37269376e-02]
[ 7.30314797e-02]
[-3.37038477e-02]
[-2.61058242e-02]
[ 7.39118587e-03]
[-3.35828093e-02]
[ 1.07280965e-01]
[-1.34457876e-03]
[ 1.06175724e-02]
[-9.85707637e-03]
[-3.98932485e-03]
[-4.30710625e-02]
[ 4.13248138e-02]
[ 3.84317362e-02]
[-1.38080254e-02]
[-2.77864197e-03]
[-1.32410992e-02]
[-1.43886390e-02]
[ 3.08027234e-02]
[-4.42561790e-02]
[ 1.91069875e-02]
[-5.24539978e-02]
[-8.93282169e-03]
[ 9.40928728e-02]
[-3.28483179e-02]
[ 3.10716660e-02]
[ 1.75746553e-03]
[ 1.78298160e-03]
[ 3.97411515e-02]
[ 2.74560487e-03]
[-8.07721078e-03]
[-2.36685694e-03]
[ 6.25055235e-03]
[ 3.68534088e-02]
[-2.11750848e-03]
[-2.21178113e-03]
[ 1.37981827e-02]
[-1.45079331e-02]
[ 4.59629097e-02]
[ 2.78857964e-02]
[ 2.11294475e-03]
[-2.19967835e-03]
[ 5.93493248e-02]
[-7.87898117e-03]
[ 1.44863664e-03]
[ 1.38945408e-02]
[ 1.94948911e-02]
[ 2.76797039e-03]
[ 1.55920954e-02]
[-2.88486911e-03]
[ 1.82199708e-04]
[ 6.20751007e-03]
[-1.99499527e-02]
[-9.76096318e-03]
[-2.93045423e-02]
[ 3.31929791e-02]
[ 2.60883354e-02]
[-2.25469736e-02]
[ 1.06160811e-02]
[-2.00850285e-02]
[-4.84014439e-03]
[ 2.47481641e-02]
[ 3.75521290e-02]
[ 9.01478969e-02]
[ 4.27129161e-02]
[-2.33835456e-02]
[ 5.09505438e-03]
[-1.61128852e-02]
[ 3.80043316e-02]
[-3.08956316e-02]
[ 2.63561115e-02]
[ 6.57216215e-04]
[ 3.12846292e-02]
[ 2.23176911e-02]
[ 2.10721601e-02]
[-9.54648394e-03]
[ 3.39514169e-02]
[ 7.99438249e-04]
[ 1.16481526e-02]
[ 3.01312272e-03]
[-5.10111639e-02]
[-8.38901669e-03]
[-3.49370834e-03]
[-1.37510401e-02]
[-1.98988117e-03]
[-1.03977664e-02]
[ 8.54237047e-02]]
Hypatia.Cones.load_point(K, point)
Hypatia.Cones.update_feas(K)

# while true
#     Cones.reset_data(K)
#     point = randn(T, K.dim)
#     @views Hypatia.Cones.smat_to_svec!(point[2:end], randDensityMatrix(R, K.ni), sqrt(2.))
#     Hypatia.Cones.load_point(K, point)
    
#     if Hypatia.Cones.update_feas(K)
#         break
#     end
# end

H = [[-0.33194688]
[ 0.24425589]
[-0.07579368]
[ 0.34409209]
[-0.30297974]
[ 0.31891554]
[-0.42767468]
[ 0.34610771]
[-0.07635106]
[-0.35925864]
[-0.19408285]
[ 0.20936193]
[-0.05371503]
[-0.26673564]
[-0.2612345 ]
[ 0.19317325]
[ 0.14776948]
[-0.4360749 ]
[ 0.3125177 ]
[-0.35981582]
[-0.25943576]
[-0.48609617]
[ 0.00625484]
[ 0.35093205]
[ 0.42973708]
[-0.03669023]
[-0.39725072]
[-0.02569488]
[-0.20954173]
[-0.19060272]
[-0.25704091]
[ 0.45369155]
[-0.10258967]
[-0.49642657]
[-0.00473784]
[ 0.20019775]
[ 0.31527032]
[ 0.25338683]
[ 0.20216227]
[-0.30190437]
[-0.14989462]
[-0.04052794]
[-0.36303765]
[-0.07262253]
[-0.39851184]
[-0.41274438]
[ 0.33618573]
[-0.33105244]
[-0.02713159]
[ 0.1249124 ]
[ 0.43896888]
[-0.19367677]
[-0.31887855]
[ 0.37542134]
[-0.1964142 ]
[-0.22234693]
[-0.3498721 ]
[-0.05531818]
[-0.26852527]
[-0.1411384 ]
[-0.16635342]
[ 0.12488757]
[-0.0542978 ]
[ 0.17794344]
[-0.19914313]
[-0.1776182 ]
[ 0.49827953]
[-0.26172609]
[ 0.26286148]
[ 0.19958668]
[ 0.14784065]
[-0.3784384 ]
[-0.49442768]
[ 0.24555326]
[-0.4169715 ]
[-0.25728088]
[ 0.48922763]
[ 0.46611418]
[ 0.42132475]
[ 0.08326448]
[-0.04376796]
[-0.0376624 ]
[-0.16026085]
[ 0.4673533 ]
[ 0.31597955]
[ 0.49192524]
[-0.19911829]
[ 0.07985073]
[ 0.18206786]
[-0.11637085]
[ 0.084178  ]
[-0.30348278]
[-0.1861318 ]
[-0.36505317]
[ 0.14277871]
[-0.16585702]
[-0.07516376]
[-0.11943372]
[-0.44725017]
[ 0.39585385]
[ 0.22747467]
[-0.1759668 ]
[ 0.39869932]
[ 0.17562322]
[ 0.49167113]
[-0.03678704]
[-0.39039213]
[-0.37840149]
[ 0.24647161]
[ 0.0787477 ]
[-0.28319051]
[ 0.0475959 ]
[ 0.02980388]
[ 0.35777633]
[-0.44692376]
[-0.38694865]
[-0.0573989 ]
[-0.36058291]
[ 0.48874244]
[-0.30174743]
[ 0.11963299]
[-0.05634302]
[ 0.28167436]
[-0.44737043]
[-0.17560494]
[-0.03022738]
[-0.38636608]
[ 0.14117731]
[ 0.03421466]
[ 0.32680861]
[-0.05771494]
[-0.2049792 ]
[-0.18410786]
[-0.26434997]
[ 0.43298527]
[ 0.29871262]
[-0.15654172]
[-0.05016612]
[-0.39889   ]
[ 0.08937964]
[ 0.22890648]
[-0.27204721]
[-0.05798466]
[ 0.1748476 ]
[-0.05735649]]

# H = randn(T, K.dim)
x0 = copyto!(zeros(T, K.dim), K.point)
f0 = K.fval
g0 = copyto!(zeros(T, K.dim), Hypatia.Cones.update_grad(K))
H0 = Hypatia.Cones.hess_prod!(zeros(T, K.dim), H, K)
T0 = Hypatia.Cones.dder3(K, H)


f1 = zeros(T, K.dim)
for i in 1:K.dim
    Cones.reset_data(K)
    point = copyto!(zeros(T, K.dim), x0)
    point[i] += ϵ
    Hypatia.Cones.load_point(K, point)
    Hypatia.Cones.update_feas(K)
    f1[i] = K.fval
end

x1 = x0 + ϵ*H
Cones.reset_data(K)
Hypatia.Cones.load_point(K, x1)
Hypatia.Cones.update_feas(K)
g1 = copyto!(zeros(T, K.dim), Hypatia.Cones.update_grad(K))
H1 = Hypatia.Cones.hess_prod!(zeros(T, K.dim), H, K)
T1 = Hypatia.Cones.dder3(K, H)



println("Gradient test (FDD=0): ", norm(0.5 * (g0 + g1) - ((f1 .- f0) ./ ϵ)))
println("Gradient test (ID=nu): ", (-g0' * x0))

println("Hessian test (ID=0): ",  norm(Hypatia.Cones.hess_prod!(zeros(T, K.dim), x0, K) + g0))
println("Hessian test (ID=nu): ", dot(Hypatia.Cones.hess_prod!(zeros(T, K.dim), x0, K), x0))
println("Hessian test (FDD=0): ", norm(0.5 * (H0 + H1) - ((g1 .- g0) ./ ϵ)))

println("Inv Hessian test (ID=0): ", norm(H .- Hypatia.Cones.inv_hess_prod!(zeros(T, K.dim), H1, K)))
println("Inv Hessian test (ID=nu): ", dot(Hypatia.Cones.inv_hess_prod!(zeros(T, K.dim), g0, K), g0))

print("TOA test: ", norm(0.5 * (T0 .+ T1) - ((H1 .- H0) ./ ϵ)))